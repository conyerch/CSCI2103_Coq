Definition injective {A B} (f : A -> B) :=
  forall x y : A, f x = f y -> x = y.

Lemma succ_inj : injective S.
Proof.
  unfold injective. intros. inversion H. reflexivity. 
Qed.

Check conj. 

Example and_exercise :
  forall n m : nat, n + m = 0 -> n = 0 /\ (m = 0).
Proof.
  split. 
    - apply H. Abort. 


Lemma proj2 : forall P Q : Prop,
  P /\ Q -> Q.
Proof.
  intros P Q H. destruct H. apply H0. 
Qed. 

Theorem and_commut : forall P Q : Prop,
  P /\ Q -> Q /\ P.
Proof.
  intros P Q [HP HQ].
  split.
    - (* left *) apply HQ.
    - (* right *) apply HP. Qed.


Theorem and_assoc : forall P Q R : Prop,
  P /\ (Q /\ R) -> (P /\ Q) /\ R.
Proof.
   intros P Q R [HP [HQ HR]].
   split. 
    - split. 
      + apply HP. 
      + apply HQ. 
    - apply HR. 
Qed. 

Lemma zero_or_succ :
  forall n : nat, n = 0 \/ n = S (pred n).
Proof.
  intros n. destruct n. 
    - left. reflexivity. 
    - right. simpl. reflexivity. 
Qed. 

Theorem ex_falso_quodlibet : forall (P:Prop),
  False -> P.
Proof.
  intros P H. destruct H. 
Qed. 

Theorem not_implies_our_not : forall (P:Prop),
  not P -> (forall (Q:Prop), P -> Q).
Proof.
  intros. unfold not in H. pose proof (H H0) as C. destruct C. 
Qed. 


 Notation "x <> y" := (~(x = y)).


Theorem zero_not_one : 0 <> 1.
Proof.
  unfold not. intros contra. discriminate contra. 
Qed. 

Theorem contradiction_implies_anything : forall P Q : Prop,
  (P /\ not P) -> Q.
Proof.
  intros P Q contra. unfold not in contra. destruct contra. 
  apply H0 in H. destruct H. 
Qed. 

Theorem contrapositive : forall (P Q : Prop),
  (P -> Q) -> (not Q -> not P).
Proof.
  intros P Q H. unfold not. intros H1. intros H2. apply H in H2. apply H1 in H2. destruct H2. 
 Qed. 

Theorem de_morgan_not_or : forall (P Q : Prop),
    not (P \/ Q) -> not P /\ not Q.
Proof.

  intros P Q H. unfold not. unfold not in H. split. 
    - intros h1. assert (P -> P \/ Q).  { left. apply H0. }
    apply H0 in h1. apply H in h1. destruct h1. 
    - intros h1. assert (Q -> P \/ Q). {intros h2. right. apply h2. }
    apply H0 in h1. apply H in h1. destruct h1. 
Qed. 


Module IffPlayground.
Definition iff (P Q : Prop) := (P ->Q) /\ (Q -> P).
Notation "P <-> Q" := (iff P Q)
                      (at level 95, no associativity)
                      : type_scope.
End IffPlayground.


Theorem iff_sym : forall P Q : Prop,
  (P <-> Q) -> (Q <-> P).
Proof.
  intros P Q [HA HB]. split. 
    - intros H3. apply HB in H3. Abort. 


From Coq Require Import Setoids.Setoid.

 
Theorem or_assoc :
  forall P Q R : Prop, P \/ (Q \/ R) <-> (P \/ Q) \/ R.
Proof.
  intros P Q R. split.
  - intros [H | [H | H]].
    + left. left. apply H.
    + left. right. apply H.
    + right. apply H.
  - intros [[H | H] | H].
    + left. apply H.
    + right. left. apply H.
    + right. right. apply H.
Qed.

Lemma mult_is_O :
  forall n m, n * m = 0 -> n = 0 \/ m = 0.
Proof.
    intros n m H. destruct n. 
    + left. reflexivity. 
    + destruct m. 
      - right. reflexivity. 
      - discriminate H. 
Qed. 

Lemma factor_is_O:
  forall n m : nat, n = 0 \/ m = 0 -> n * m = 0.
Proof.
  (* This pattern implicitly does case analysis on
     n = 0 \u2228 m = 0 *)
  intros n m [Hn | Hm].
  - (* Here, n = 0 *)
    rewrite Hn. reflexivity.
  - (* Here, m = 0 *)
    rewrite Hm. rewrite <- mult_n_O.
    reflexivity.
Qed.


Lemma mul_eq_0 : forall n m, n * m = 0 <-> n = 0 \/ m = 0.
Proof.
  split.
  - apply mult_is_O.
  - apply factor_is_O.
Qed.

Lemma mul_eq_0_ternary :
  forall n m p, n * m * p = 0 <-> n = 0 \/ m = 0 \/ p = 0.
Proof.
  intros n m p. rewrite -> mul_eq_O. 



