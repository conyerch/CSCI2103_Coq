Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".

From Coq Require Import Lia.


Inductive ev : nat -> Prop :=
  | ev_0 : ev 0
  | ev_SS (n : nat) (H : ev n) : ev (S (S n)).

Theorem ev_4'' : ev 4.
Proof.
  Show Proof.
  apply ev_SS.
  Show Proof.
  apply ev_SS.
  Show Proof.
  apply ev_0.
  Show Proof.
Qed.

Theorem ev_8 : ev 8.
  apply ev_SS. apply ev_SS. apply ev_SS. apply ev_SS. apply ev_0. 
Qed. 

Definition ev_8' : ev 8 :=
  ev_SS 6 (ev_SS 4 (ev_SS 2 (ev_SS 0 ev_0))). 

Theorem ev_plus4 : forall n, ev n -> ev (4 + n).
Proof.
  intros n H. simpl. apply ev_SS. apply ev_SS. apply H. 
Qed. 

Definition ev_plus4'' (n : nat) (H : ev n)
                    : ev (4 + n) :=
  ev_SS (S (S n)) (ev_SS n H).
Check ev_plus4''
  : forall n : nat,
    ev n ->
    ev (4 + n).

Definition add1 : nat -> nat.
intro n.
Show Proof.
apply S.
Show Proof.
apply n. Defined.
Print add1.
(* ==>
    add1 = fun n : nat => S n
         : nat -> nat
*)
Compute add1 2.

Theorem proj1' : forall P Q,
  P /\ Q -> P.
Proof.
  intros P Q HPQ. destruct HPQ as [HP HQ]. apply HP.
  Show Proof.
Qed.

Definition and_comm'_aux P Q (H : P /\ Q) : Q /\ P :=
  match H with
  | conj HP HQ => conj HQ HP
  end.

Definition conj_fact : forall P Q R, P /\ Q -> Q /\ R -> P /\ R:=
  conj (proj1' P Q) (proj1' (and_comm'_aux Q R ) Q). 


















