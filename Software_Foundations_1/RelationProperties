Set Warnings "-notation-overridden,-parsing,-deprecated-hint-without-locality".
Require Import FunInd. 

Definition relation (X: Type) := X -> X -> Prop.

Definition partial_function {X: Type} (R: relation X) :=
  forall x y1 y2 : X, R x y1 -> R x y2 -> y1 = y2.

Inductive next_nat : nat -> nat -> Prop :=
  | nn n : next_nat n (S n).

Check next_nat : relation nat.

Theorem next_nat_partial_function :
  partial_function next_nat.
Proof. 
  unfold partial_function. intros. inversion H. inversion H0. reflexivity. 
Qed. 
    

Inductive total_relation : nat -> nat -> Prop :=
  | tr_n (n : nat) : total_relation n n
  | tr_S (n m : nat) (H : total_relation n m) : total_relation m (S n).

Theorem total_relation_not_partial_function :
  not (partial_function total_relation).
Proof.
  unfold not. unfold partial_function. intros. Abort. 


Definition reflexive {X: Type} (R: relation X) :=
  forall a : X, R a a.
Theorem le_reflexive :
  reflexive le.
Proof.
  unfold reflexive. intros n. apply le_n. Qed.

Definition transitive {X: Type} (R: relation X) :=
  forall a b c : X, (R a b) -> (R b c) -> (R a c).
Theorem le_trans :
  transitive le.
Proof.
  intros n m o Hnm Hmo.
  induction Hmo.
  - (* le_n *) apply Hnm.
  - (* le_S *) apply le_S. apply IHHmo. Qed.

Theorem lt_trans:
  transitive lt.
Proof.
  unfold lt. unfold transitive.
  intros n m o Hnm Hmo.
  apply le_S in Hnm.
  apply le_trans with (a := (S n)) (b := (S m)) (c := o).
  apply Hnm.
  apply Hmo. Qed.

Theorem lt_trans' :
  transitive lt.
Proof.
  (* Prove this by induction on evidence that m is less than o. *)
  unfold lt. unfold transitive.
  intros n m o Hnm Hmo.
  induction Hmo as [| m' Hm'o].
 - apply le_S. apply Hnm. 
 - apply le_S. apply IHHm'o. 
Qed. 

Require Export Coq.Classes.SetoidTactics.
Require Import Setoid. 
(**
Theorem lt_trans'' :
  transitive nat lt.
Proof. 
  unfold lt. unfold transitive. 
  intros n m o H H1. 
  induction o as [| o']. 
  -  **)

Definition symmetric {X: Type} (R: relation X) :=
  forall a b : X, (R a b) -> (R b a).

Theorem le_not_symmetric :
  not (symmetric le).
Proof.
  unfold symmetric. 
  intros. unfold not. 
  intros. 



















