
Inductive natlist : Type :=
  | nil
  | cons (n : nat) (l : natlist).

Notation "x :: l" := (cons x l)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).

Fixpoint snoc (l:natlist) (v:nat) : natlist := 
  match l with
  | nil    => [v]
  | h :: t => h :: (snoc t v)
  end.

Fixpoint rev (l:natlist) : natlist := 
  match l with
  | nil    => nil
  | h :: t => snoc (rev t) h
  end.

Fixpoint app (l1 l2 : natlist) : natlist :=
  match l1 with
  | nil => l2
  | h :: t => h :: (app t l2)
  end.

Fixpoint length (l:natlist) : nat :=
  match l with
  | nil => O
  | h :: t => S (length t)
  end.

Notation "x ++ y" := (app x y)
                     (right associativity, at level 60).

Theorem app_length : forall l1 l2 : natlist,
  length (l1 ++ l2) = (length l1) + (length l2).
Proof.
  (* WORKED IN CLASS *)
  intros l1 l2. induction l1 as [| n l1' IHl1'].
  - simpl. reflexivity.
  - simpl. rewrite -> IHl1'. reflexivity.
Qed.


Theorem app_nil_r : forall l : natlist,
  l ++ [] = l.
Proof.
intros l. simpl. induction l as [| l'].
  - simpl. reflexivity.
  - simpl. rewrite -> IHl. reflexivity.
Qed.

Require Export Arith_base.


Theorem rev_length : forall l : natlist,
  length (rev l) = length l.
Proof.
  intros l. induction l as [| n l' IHl'].
  - (* l = nil *)
    reflexivity.
  - (* l = cons *)
    simpl. rewrite -> app_length.
    simpl. rewrite ->IHl'. rewrite -> plus_comm.
    reflexivity.
Qed.

Theorem app_assoc : forall l1 l2 l3 : natlist,
  (l1 ++ l2) ++ l3 = l1 ++ (l2 ++ l3).
Proof.
  intros l1 l2 l3. induction l1 as [| n l1' IHl1'].
  - (* l1 = nil *)
    reflexivity.
  - (* l1 = cons n l1' *)
    simpl. rewrite -> IHl1'. reflexivity. Qed.

Theorem rev_app_distr: forall l1 l2 : natlist,
  rev (l1 ++ l2) = rev l2 ++ rev l1.
Proof.
intros l1 l2. induction l1 as [| l'].
  - simpl. rewrite -> app_nil_r. reflexivity.
  - simpl. rewrite -> IHl1. rewrite -> app_assoc. reflexivity.
Qed.



Theorem rev_add : forall l : natlist, forall n : nat,
  rev (snoc l n) = n :: (rev l).
  intros l n. induction l as [| l'].
- simpl. reflexivity.
- simpl. rewrite -> IHl. reflexivity. 
Qed.

(***Theorem rev_add1 : forall l : natlist, forall n : nat,
  snoc (rev 1) n = n :: rev(l). **)
(***
Theorem rev_involutive : forall l : natlist,
  rev (rev l) = l.
Proof.
  intros l. induction l as [|n l'].
  - simpl. reflexivity.
  - simpl. rewrite -> snoc. **)

Theorem rev_snoc : forall n : nat, forall l : natlist,
  rev (snoc l n) = n :: (rev l).
Proof.
  intros n l. induction l as [| n' l'].
  
    -reflexivity.
  
    -simpl. rewrite -> IHl'. reflexivity.  Qed.

Theorem rev_involutive : forall l : natlist,
  rev (rev l) = l.
Proof.
  (* SOLUTION: *)
  intros l. induction l as [| n l'].
    -reflexivity.
    -simpl. rewrite -> rev_snoc. rewrite -> IHl'. reflexivity.  Qed.


Theorem app_assoc4 : forall l1 l2 l3 l4 : natlist,
  l1 ++ (l2 ++ (l3 ++ l4)) = ((l1 ++ l2) ++ l3) ++ l4.
Proof.
  intros l1 l2 l3 l4. rewrite -> app_assoc. rewrite <- app_assoc. reflexivity. 
Qed.

Definition bag := natlist.  



Fixpoint count (v:nat) (s:bag) : nat := 
  (* SOLUTION: *)
  match s with
  | nil => 0
  | h :: t => 
      match beq_nat h v with
      | false => count v t
      | true => S (count v t)
      end
  end.

Definition sum : bag -> bag -> bag := 
  (* SOLUTION: *)
  app.


Definition add (v:nat) (s:bag) : bag := 
  (* SOLUTION: *)
  v :: s.


Definition member (v:nat) (s:bag) : bool := 
  (* SOLUTION: *)
  negb (beq_nat (count v s) 0).


Fixpoint remove_one (v:nat) (s:bag) : bag :=
  (* When remove_one is applied to a bag without the number to remove,
     it should return the same bag unchanged. *)
  (* SOLUTION: *)
  match s with
  | nil => nil
  | h :: t => 
      match beq_nat h v with
      | true => t
      | false => h :: (remove_one v t)
      end
  end.

Theorem count_member_nonzero : forall (s : bag),
  1 <=? (count 1 (1 :: s)) = true.
Proof.
  intros s. induction s as [| s'].
  - simpl. reflexivity.
  - simpl. reflexivity.
Qed.

Theorem leb_n_Sn : forall n,
  n <=? (S n) = true.
Proof.
  intros n. induction n as [| n' IHn'].
  - (* 0 *)
    simpl. reflexivity.
  - (* S n' *)
    simpl. rewrite IHn'. reflexivity. Qed.

Theorem remove_does_not_increase_count: forall (s : bag),
  (count 0 (remove_one 0 s)) <=? (count 0 s) = true.
Proof.
  intros s. induction s as [| s'].
  - simpl. reflexivity. 
  - destruct s as [| s1].
    {simpl. rewrite -> leb_n_Sn.








